/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
//      function to combine left and right half
    ListNode * combineAll(ListNode * p1, ListNode * p2)
    {
     if(p1 ==NULL || p2 == NULL){
        return  (p1== NULL) ? p2:p1;
     }   
        ListNode * ans = new ListNode(0);
        ListNode * curr = ans;
        
         while (p1!=NULL && p2!=NULL)
         {
             if(p1->val < p2->val){
                 curr->next =p1;
                 p1= p1->next;     
             }
             else{
                 curr->next =p2;
                 p2= p2->next;
                
             }
               curr = curr->next;
         }
      
         if(p1 !=NULL || p2 != NULL){
        curr->next=  (p1!= NULL) ?p1: p2;
         }
        return  ans->next;        
    }
//         
    ListNode* findMIddle(ListNode * head){
         ListNode * fast = head;
        ListNode * slow = head;
        
         while(fast->next!=NULL && fast->next->next!=NULL){
            fast= fast->next->next;
            slow = slow->next;
        }
        return slow;
    }   
    
    
    ListNode* sortList(ListNode* head)
    {    
        if(head==NULL ||head->next == NULL) return head;
        ListNode * mid = findMIddle(head);
        ListNode * newHead = mid->next;
        mid ->next = NULL;
        
//          left half 
        ListNode * left_half = sortList(head);
//         right half
        ListNode * right_half = sortList(newHead);
        
//          now combing the all ;
        ListNode * newhead = combineAll(left_half, right_half);
        
        return newhead;
    }
};