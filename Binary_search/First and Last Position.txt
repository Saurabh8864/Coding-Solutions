pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
    // Write your code here
    int first=- 1;
    int last =-1;

    for(int i=0;i<n;i++){
      if (arr[i] == k) {
          if(first==-1) first = i;

        last = i;
      }
    }
    return {first,last};
}

time complexcity =O(n)




#include <bits/stdc++.h>
int lower_bound(vector<int>&arr, int n, int k){
  int ans= n;
  int low=0;
  int high= n-1;

  while(low<=high){

    int mid = low+(high-low)/2;

    if(arr[mid]>=k){
      ans = mid;
      high = mid-1;

    }
    else low= mid+1;
  }
  return ans;
} 

int upper_bound(vector<int>&arr, int n, int k){
  int ans= n;
  int low=0;
  int high= n-1;

  while(low<=high){

    int mid = low+(high-low)/2;

    if(arr[mid]>k){
      ans = mid;
      high = mid-1;

    }
    else low= mid+1;
  }
  return ans;
} 
pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
    int lb = lower_bound(arr,n,k);
    if(arr[lb]==n||arr[lb]!=k)return {-1,-1};
    int up= upper_bound(arr,n,k);
    return {lb ,up-1};
}

Time Complexcity = O(2*log n)




#include <bits/stdc++.h> 
int firstOccurence(vector<int>&arr, int n , int k){
  int low =0;
  int high = n-1;
  int ans=-1;
  while(low<=high){
    int mid = low+(high-low)/2;
    if(arr[mid]== k){
      ans= mid;
      high = mid-1;
    }
    else if( arr[mid]<k) low = mid+1;
    else  high = mid-1;
  }
  return ans;
}

int lastOcurrence(vector<int>&arr, int n , int k){
  int low =0;
  int high = n-1;
  int ans=-1;
  while(low<=high){
    int mid = low+(high-low)/2;
    if(arr[mid]== k){
      ans= mid;
      low = mid+1;
    }
    else if( arr[mid]<k) low = mid+1;
    else  high = mid-1;
  }
  return ans;
}

pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
  int fi = firstOccurence(arr, n,k);
   int la = lastOcurrence(arr,n,k);
  return {fi, la};
}


Time Complexcity = O(2*log n)