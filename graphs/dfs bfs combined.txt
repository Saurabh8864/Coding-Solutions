#include <bits/stdc++.h>
using namespace std;

class Solution{
  public:
  // bfs traversal
vector<int>findBFS(int V, vector<int>adj[]){
  queue<int> q;
  int vis[V+1] ={0};
  // initially visited the  very first node
  vis[0]=1;
  q.push(0);
vector<int> bfs;
  while(!q.empty())
  {
    auto node = q.front();
    q.pop();
    bfs.push_back(node);

    //  look for the adjacency of the node 
    for(auto it: adj[node]){
      // check if it is already visited;
      if(!vis[it]){
        //  if not visited make it visited and 
        // push to queue
        vis[it] =1;
        q.push(it);
      }
    }
  }
return bfs;
}

// dfs helper function
private :
 void dfsHelper(int ind , int vis[],vector<int> adj[] ,vector<int> &ans)
 {
  // mark visited as soon as it reaches the node
      vis[ind]=1;
    ans.push_back(ind);
    
    //  look for  adjacency list 
   for(auto it :adj[ind]){
    //  if already visted no need to traverse it again 
    if(!vis[it]){
      dfsHelper(it, vis,adj,ans);
    }
   }

 }
public :
// Dfs traversal
vector<int>findDFS(int V, vector<int>adj[]){
  int vis[V]={0};
  int start =0;
  vector<int> ans;
    dfsHelper( start,vis,adj, ans);
    return ans;
}

};

//  function to add the node 
void addNode(vector<int>adj[], int U, int V){
    adj[U].push_back(V);
    adj[V].push_back(U);
}

//  functiom to print the result
void printNode(vector<int> & ans)
{
  for(int i=0;i<ans.size();i++){
    cout<< ans[i] <<" ";
  }
}

// main function

int main(){
 
        // bfs
    vector<int> adj[6];
    // adding the nodes
   addNode(adj,0,1);
    addNode(adj,1,2);
     addNode(adj,1,3);
      addNode(adj,0,4);

      Solution ob;

 
  vector<int> bfsans = ob.findBFS(5,adj);
   cout<< "bfs traversal is ------>";
   printNode(bfsans);

        // dfs 
   vector<int> adj1[5];
   addNode(adj1, 0, 2);
    addNode(adj1, 2, 4);
    addNode(adj1, 0, 1);
    addNode(adj1, 0, 3);

       Solution df;

  cout<< " \n dfs traversal is ------>";
  vector<int> dfsans = df.findDFS(5,adj);
  printNode(dfsans);
  }









